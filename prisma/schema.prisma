generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id           String   @id @default(uuid())
  clerkId      String   @unique
  firstName    String
  lastName     String
  userName     String
  email        String
  profileImage String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  favorites Favorite[]
  reviews   Review[]
}

model Anime {
  id             String   @id @default(uuid())
  title          String
  synopsis       String
  genre          String[]
  image          String
  episodes       Int
  releaseDate    DateTime
  status         String
  createdBy      String
  premiered      String?
  aired          String?
  broadcast      String?
  producers      String[]
  licensors      String[]
  studios        String[]
  source         String?
  demographic    String?
  duration       String?
  rating         String?
  score          Float?   @default(0)
  ranked         String?
  popularity     Int?     @default(0)
  members        Int?     @default(0)
  favorite       Int      @default(0)
  animeSimpleUrl String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  characters Character[]
  reviews    Review[]
  favorites  Favorite[]
}

model Character {
  id          String   @id @default(uuid())
  name        String
  role        String // e.g., "Main", "Supporting"
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  animeId String
  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  content   String
  rating    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  animeId String
  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  animeId String
  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
}

// model RelatedEntries {
//   id          String   @id @default(uuid())
//   title       String
//   image       String
//   animeId     String
//   anime       Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)

//   relatedTo Anime[]
// }
